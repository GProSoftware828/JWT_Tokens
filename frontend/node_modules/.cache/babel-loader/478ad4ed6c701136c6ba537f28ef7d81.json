{"ast":null,"code":"import _slicedToArray from \"/Users/georgie/Desktop/Repositories/JWTApp/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/georgie/Desktop/Repositories/JWTApp/frontend/src/components/Protected.js\";\nimport React, { useEffect, useContext } from 'react';\nimport { UserContext } from '../App';\n\nconst Protected = () => {\n  const _useContext = useContext(UserContext),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        user = _useContext2[0];\n\n  useEffect(() => {\n    async function fetchProtected() {\n      const result = await (await fetch('http://localhost:4000/protected', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          authorization: `Bearer ${user.accesstoken}`\n        }\n      })).json();\n      console.log('user: ', user);\n      console.log('result: ', result);\n    }\n\n    fetchProtected();\n  }, [user]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, user.accesstoken ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"banner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Your To-Do's\"), React.createElement(\"p\", {\n    className: \"msg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, message), React.createElement(\"img\", {\n    src: Plus,\n    alt: \"plus_clickme_show_input_form\",\n    onClick: this.toggleInputHandler,\n    className: \"plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), this.state.showForm === true ? React.createElement(\"div\", {\n    className: \"inputForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    ref: input => this.addForm = input,\n    onSubmit: e => {\n      this.addItem(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type To-do Here\",\n    id: \"newItemInput\",\n    ref: input => this.newItem = input,\n    className: \"input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"button\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })))) : null), React.createElement(\"div\", {\n    className: \"block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, todos.map(item => React.createElement(ToDo, {\n    click: () => this.completedItem(item),\n    title: item.title,\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })))))), React.createElement(\"button\", {\n    className: \"completedBtn\",\n    onClick: this.toggleCompletedHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Show Completed\"), this.state.showCompleted === true ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, completed.map(item => React.createElement(Completed, {\n    click: () => this.removeItem(item),\n    title: item.title,\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }))))))) : null))) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"'log in to use the app'\"));\n};\n\nexport default Protected;","map":{"version":3,"sources":["/Users/georgie/Desktop/Repositories/JWTApp/frontend/src/components/Protected.js"],"names":["React","useEffect","useContext","UserContext","Protected","user","fetchProtected","result","fetch","method","credentials","headers","authorization","accesstoken","json","console","log","message","Plus","toggleInputHandler","state","showForm","input","addForm","e","addItem","newItem","todos","map","item","completedItem","title","id","toggleCompletedHandler","showCompleted","completed","removeItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { UserContext } from '../App';\n\nconst Protected = () => {\n  const [user] = useContext(UserContext);\n\n  useEffect(() => {\n    async function fetchProtected() {\n      const result = await (\n        await fetch('http://localhost:4000/protected', {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n            authorization: `Bearer ${user.accesstoken}`\n          }\n        })\n      ).json();\n      console.log('user: ', user);\n      console.log('result: ', result);\n    }\n    fetchProtected();\n  }, [user]);\n\n  return (\n    <div>\n      {user.accesstoken ? (\n        <React.Fragment>\n          <div>\n            <div className=\"header\">\n              <h1 className=\"banner\">Your To-Do's</h1>\n              <p className=\"msg\">{message}</p>\n              <img\n                src={Plus}\n                alt=\"plus_clickme_show_input_form\"\n                onClick={this.toggleInputHandler}\n                className=\"plus\"\n              />\n\n              {this.state.showForm === true ? (\n                <div className=\"inputForm\">\n                  <form\n                    ref={input => (this.addForm = input)}\n                    onSubmit={e => {\n                      this.addItem(e);\n                    }}\n                  >\n                    <div>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Type To-do Here\"\n                        id=\"newItemInput\"\n                        ref={input => (this.newItem = input)}\n                        className=\"input\"\n                      />\n                      <br />\n                      <br />\n                      <button className=\"button\" type=\"submit\">\n                        Add\n                      </button>\n                      <br />\n                      <br />\n                    </div>\n                  </form>\n                </div>\n              ) : null}\n            </div>\n\n            <div className=\"block\">\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      {todos.map(item => (\n                        <ToDo\n                          click={() => this.completedItem(item)}\n                          title={item.title}\n                          key={item.id}\n                        />\n                      ))}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <button\n                className=\"completedBtn\"\n                onClick={this.toggleCompletedHandler}\n              >\n                Show Completed\n              </button>\n              {this.state.showCompleted === true ? (\n                <div>\n                  <table>\n                    <tbody>\n                      <tr>\n                        <td>\n                          {completed.map(item => (\n                            <Completed\n                              click={() => this.removeItem(item)}\n                              title={item.title}\n                              key={item.id}\n                            />\n                          ))}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n        <p>'log in to use the app'</p>\n      )}\n    </div>\n  );\n};\n\nexport default Protected;\n"]},"metadata":{},"sourceType":"module"}