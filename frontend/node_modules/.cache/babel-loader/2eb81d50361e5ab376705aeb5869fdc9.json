{"ast":null,"code":"var _jsxFileName = \"/Users/georgie/Desktop/Repositories/JWTApp/frontend/src/components/Protected.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from '../App';\nimport { ToDo } from '../ToDo/ToDo';\nimport { Completed } from '../Completed/Completed';\nimport ls from 'local-storage';\nimport '../App.css';\nimport Plus from \"../assets/graphics/Plus.svg\";\n\nconst Protected = props => {\n  // const [showForm, setShowForm] = useState();\n  // const [message, setMessage] = useState();\n  // const [showCompleted, setShowCompleted] = useState();\n  // const [todos, setTodos] = useState(() => {\n  //   const localData = ls.get('toDos');\n  //   return localData ? localData : [{ title: 'Todo 1' }, { title: 'Todo 2' }];\n  // });\n  // const [completed, setCompleted] = useState(() => {\n  //   const localData = ls.get('completeds');\n  //   return localData\n  //     ? localData\n  //     : [{ title: 'Completed 1' }, { title: 'Completed 2' }];\n  // });\n  // const addItem = async e => {\n  //   e.preventDefault();\n  //   let newItem = { title: this.newItem.value };\n  //   const isOnTheList = todos.includes(newItem);\n  //   if (isOnTheList) {\n  //     setMessage({\n  //       message: 'This To-do is already on the list.'\n  //     });\n  //   } else {\n  //     newItem =\n  //       { title: this.newItem.value, id: Math.random() } &&\n  //       newItem !== '' &&\n  //       setTodos({ todos: [...todos, newItem] }) &&\n  //       setMessage({ message: 'Added entry to to-do list' }) &&\n  //       (await ls.set('toDos', JSON.stringify(todos)));\n  //   }\n  //   this.addForm.reset();\n  //   await ls.set('toDos', JSON.stringify(todos));\n  // };\n  // const completedItem = async item => {\n  //   const newTodos = todos.filter(todo => {\n  //     return todo !== item;\n  //   });\n  //   if (1 === 1) {\n  //     setCompleted({ completed: [...completed, item] });\n  //     setMessage({ message: 'Added to completed list' });\n  //     setTodos({ ...newTodos });\n  //     await ls.set('completeds', JSON.stringify(completed));\n  //     await ls.set('toDos', JSON.stringify([...newTodos]));\n  //   }\n  //   await ls.set('completeds', JSON.stringify(completed));\n  //   await ls.set('toDos', JSON.stringify([...newTodos]));\n  //   const completedStore = await ls.get('completeds');\n  //   console.log('Here is the completed local state: ');\n  //   console.log(JSON.parse(completedStore));\n  // };\n  // const removeItem = async item => {\n  //   const newTodos = completed.filter(todo => {\n  //     return todo !== item;\n  //   });\n  //   if (1 === 1) {\n  //     setCompleted({\n  //       completed: [...newTodos]\n  //     });\n  //     setMessage({\n  //       message: 'Deleted old to-do'\n  //     });\n  //     await ls.set('completeds', JSON.stringify([...newTodos]));\n  //   }\n  //   await ls.set('completeds', JSON.stringify([...newTodos]));\n  //   const completedRemovals = await ls.get('completeds');\n  //   console.log('current completeds after removal: ', completedRemovals);\n  // };\n  // const toggleInputHandler = () => {\n  //   setShowForm({ showForm: !showForm });\n  // };\n  // const toggleCompletedHandler = () => {\n  //   setShowCompleted({ showCompleted: !showCompleted });\n  // };\n  // const [user] = useContext(UserContext);\n  // useEffect(() => {\n  //   async function fetchProtected() {\n  //     const result = await (\n  //       await fetch('http://localhost:4000/protected', {\n  //         method: 'POST',\n  //         credentials: 'include',\n  //         headers: {\n  //           'Content-Type': 'application/json',\n  //           authorization: `Bearer ${user.accesstoken}`\n  //         }\n  //       })\n  //     ).json();\n  //     console.log('user: ', user);\n  //     console.log('result: ', result);\n  //   }\n  //   fetchProtected();\n  // }, [user]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, user.accesstoken ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"More content coming soon!\")) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"'Please log in to visit this content.'\"));\n};\n\nexport default Protected;","map":{"version":3,"sources":["/Users/georgie/Desktop/Repositories/JWTApp/frontend/src/components/Protected.js"],"names":["React","useEffect","useState","useContext","UserContext","ToDo","Completed","ls","Protected","props","user","accesstoken"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,EAAP,MAAe,eAAf;AACA,OAAO,YAAP;;;AAGA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,WAAL,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CADD,GAyFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CA1FJ,CADF;AA+FD,CAlMD;;AAoMA,eAAeH,SAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from '../App';\nimport { ToDo } from '../ToDo/ToDo';\nimport { Completed } from '../Completed/Completed';\nimport ls from 'local-storage';\nimport '../App.css';\nimport Plus from '../assets/graphics/Plus.svg';\n\nconst Protected = props => {\n  // const [showForm, setShowForm] = useState();\n  // const [message, setMessage] = useState();\n  // const [showCompleted, setShowCompleted] = useState();\n\n  // const [todos, setTodos] = useState(() => {\n  //   const localData = ls.get('toDos');\n  //   return localData ? localData : [{ title: 'Todo 1' }, { title: 'Todo 2' }];\n  // });\n  // const [completed, setCompleted] = useState(() => {\n  //   const localData = ls.get('completeds');\n  //   return localData\n  //     ? localData\n  //     : [{ title: 'Completed 1' }, { title: 'Completed 2' }];\n  // });\n\n  // const addItem = async e => {\n  //   e.preventDefault();\n  //   let newItem = { title: this.newItem.value };\n  //   const isOnTheList = todos.includes(newItem);\n  //   if (isOnTheList) {\n  //     setMessage({\n  //       message: 'This To-do is already on the list.'\n  //     });\n  //   } else {\n  //     newItem =\n  //       { title: this.newItem.value, id: Math.random() } &&\n  //       newItem !== '' &&\n  //       setTodos({ todos: [...todos, newItem] }) &&\n  //       setMessage({ message: 'Added entry to to-do list' }) &&\n  //       (await ls.set('toDos', JSON.stringify(todos)));\n  //   }\n  //   this.addForm.reset();\n  //   await ls.set('toDos', JSON.stringify(todos));\n  // };\n\n  // const completedItem = async item => {\n  //   const newTodos = todos.filter(todo => {\n  //     return todo !== item;\n  //   });\n  //   if (1 === 1) {\n  //     setCompleted({ completed: [...completed, item] });\n  //     setMessage({ message: 'Added to completed list' });\n  //     setTodos({ ...newTodos });\n  //     await ls.set('completeds', JSON.stringify(completed));\n  //     await ls.set('toDos', JSON.stringify([...newTodos]));\n  //   }\n  //   await ls.set('completeds', JSON.stringify(completed));\n  //   await ls.set('toDos', JSON.stringify([...newTodos]));\n  //   const completedStore = await ls.get('completeds');\n  //   console.log('Here is the completed local state: ');\n  //   console.log(JSON.parse(completedStore));\n  // };\n\n  // const removeItem = async item => {\n  //   const newTodos = completed.filter(todo => {\n  //     return todo !== item;\n  //   });\n  //   if (1 === 1) {\n  //     setCompleted({\n  //       completed: [...newTodos]\n  //     });\n  //     setMessage({\n  //       message: 'Deleted old to-do'\n  //     });\n  //     await ls.set('completeds', JSON.stringify([...newTodos]));\n  //   }\n  //   await ls.set('completeds', JSON.stringify([...newTodos]));\n  //   const completedRemovals = await ls.get('completeds');\n  //   console.log('current completeds after removal: ', completedRemovals);\n  // };\n\n  // const toggleInputHandler = () => {\n  //   setShowForm({ showForm: !showForm });\n  // };\n  // const toggleCompletedHandler = () => {\n  //   setShowCompleted({ showCompleted: !showCompleted });\n  // };\n\n  // const [user] = useContext(UserContext);\n\n  // useEffect(() => {\n  //   async function fetchProtected() {\n  //     const result = await (\n  //       await fetch('http://localhost:4000/protected', {\n  //         method: 'POST',\n  //         credentials: 'include',\n  //         headers: {\n  //           'Content-Type': 'application/json',\n  //           authorization: `Bearer ${user.accesstoken}`\n  //         }\n  //       })\n  //     ).json();\n  //     console.log('user: ', user);\n  //     console.log('result: ', result);\n  //   }\n  //   fetchProtected();\n  // }, [user]);\n\n  return (\n    <div>\n      {user.accesstoken ? (\n        <div>\n          <p>More content coming soon!</p>\n          {/* <React.Fragment>\n          <p>hello</p>\n          {console.log('todos: ', todos)}\n          <div>\n            <div className=\"header\">\n              <h1 className=\"banner\">Your To-Do's</h1>\n              <p className=\"msg\">{message}</p>\n              <img\n                src={Plus}\n                alt=\"plus_clickme_show_input_form\"\n                onClick={toggleInputHandler}\n                className=\"plus\"\n              />\n\n              {showForm === true ? (\n                <div className=\"inputForm\">\n                  <form\n                    ref={input => (this.addForm = input)}\n                    onSubmit={e => {\n                      addItem(e);\n                    }}\n                  >\n                    <div>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Type To-do Here\"\n                        id=\"newItemInput\"\n                        ref={input => (this.newItem = input)}\n                        className=\"input\"\n                      />\n                      <br />\n                      <br />\n                      <button className=\"button\" type=\"submit\">\n                        Add\n                      </button>\n                      <br />\n                      <br />\n                    </div>\n                  </form>\n                </div>\n              ) : null}\n            </div>\n\n            <div className=\"block\">\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      {todos.map(item => (\n                        <ToDo\n                          click={() => completedItem(item)}\n                          title={item.title}\n                          key={item.id}\n                        />\n                      ))}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <button className=\"completedBtn\" onClick={toggleCompletedHandler}>\n                Show Completed\n              </button>\n              {showCompleted === true ? (\n                <div>\n                  <table>\n                    <tbody>\n                      <tr>\n                        <td>\n                          {completed.map(item => (\n                            <Completed\n                              click={() => removeItem(item)}\n                              title={item.title}\n                              key={item.id}\n                            />\n                          ))}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </React.Fragment> */}\n        </div>\n      ) : (\n        <p>'Please log in to visit this content.'</p>\n      )}\n    </div>\n  );\n};\n\nexport default Protected;\n"]},"metadata":{},"sourceType":"module"}